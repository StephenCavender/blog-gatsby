{"entityMap":{},"blocks":[{"key":"2n7ad","text":"Level up your git usage","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bbctl","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3c3og","text":"When I first started programming in git I didn't use the terminal. I had never learned how to. I had no clue where to begin, so I didn't. I searched for a gui git client and grabbed one that looked good. I also relied on source control features built into my ide. Years later that I realized how learning the cli for git how much it would improve my speed and efficiency. So here's my journey from relying on the gui to becoming comfortable in the terminal.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e4lbo","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1kqq1","text":"Change Causes Evolution","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8tnj5","text":"When I first started out I wouldn't have changed my process. Until I got a new computer. Either because of old hardware or a new job. The new computer would not be set up like the old one. And thus started a long journey of remembering which apps I had installed and what settings I had for them. This was a huge pain. Which led me to stop doing it. After a few of these new set ups I stopped carrying over every app I had ever used. My git gui was one of those that didn't make. Which meant I needed a new way of running git commands.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dveaj","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8d0s6","text":"Learning as Needed","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"gk2n","text":"I started by reading the docs for git and looking up git cheat sheets. I found out that there was a lot of info out there. Too much in fact. For me, memorizing every git command wasn't going to work. Instead, I would search the internet for git commands that I needed when I ran into a need for them. It's still the way I learn how to git. I prefer it because I don't learn things that I won't need. And I learned how to git using the cli.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cg3ap","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"crk5b","text":"Sanic Speed","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9h6d","text":"The next big improvement I made was to pay attention to the aliasing the git cli brought with it. I set up my terminal so that it recognizes commands as I type them. One day I noticed that `g` was a valid command. So I ran it. Turns out `g` is an alias for `git`. So now all my `git` commands became `g` commands. And I thought this was amazing. But it gets even better! Now whenever I needed to run a git command I tried to find aliases for it. Through trial and error I figured out even the subcommands have aliases. So `git add` is the same as `ga`. But it still gets better! Turns out there are also aliases for subcommands and their flags! A common command I run is `git commit --all --message \"commit message\"`. And through my journey I have found these shortcuts for this same exact command:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2a4s2","text":"* `g commit --all --message \"commit message\"`","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c8l7b","text":"* `g commit -a -m \"commit message\"`","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4seo5","text":"* gc -am \"commit message\"`","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8h8v3","text":"* gcam \"commit message\"`","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"er86b","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2s5kg","text":"These aliases exist for all of the subcommands I use on a daily basis: add, checkout, branch, remote, clone, push, pull, merge, status... I'm sure there are even more. I recommend using the `-h` flag on any command you use.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2b9om","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7c9du","text":"Try It!","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dhbrb","text":"Finding these aliases has increased my speed and efficiency while programming with git. I was using the gui as a crutch to avoid the terminal and cli. I hope these aliases can help you out too.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}]}